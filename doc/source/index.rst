==============================================
Cue, Message Broker Provisioning for OpenStack
==============================================

Cue provides Message Broker provisioning services for OpenStack:

* API management for message brokers - provides properly configured message brokers on demand
* Support for RabbitMQ today, Kafka POC coming soon
* Plug-in model for open source and proprietary brokers
* Focused on lifecycle actions such as rolling patches/upgrades, scale out/in, monitoring, clustering, and self-healing

Cue is a resilient messaging service for OpenStack. Cue is a message broker
provisioning service for Openstack. Its goal is to simplify and automate the
complex tasks of provisioning, management, and administration of message
brokers. Cue is designed to provide API, CLI, and UI based management of open
source brokers such as RabbitMQ and Kafka. Because it’s designed to be
pluggable, proprietary message brokers can also be delivered as a service
through Cue.  The service will provide resource isolation at the VM level, and
does not attempt to implement multi-tenancy at the message broker layer.

There are two personas to keep in mind when thinking about Cue. One is the
Cloud Operator. The Cloud Operator installs and operates Cue, alongside the
rest of OpenStack. This person cares about Cue installation and upgrades, along
with broker level availability and versioning capabilities. The second persona
is the application developer. This person provisions message broker clusters
from the Cue API, CLI, or Horizon console. Alternatively, the application
developer consumes Cue through a Platform as a Service product such as Cloud
Foundry. In this scenario there is already a Cue provisioned cluster and the
developer simply specifies that a queue of a certain name is needed in the
application’s manifest file. At deploy time, the queue is created directly on
the message broker itself using a Cloud Foundry service broker.

What problem is Cue solving?
----------------------------

Messaging is a common development pattern for building loosely coupled
distributed systems. Messaging systems act as glue between independent
applications. Dozens of off-the-shelf products exist that implement messaging
and queuing semantics, many of which implement open protocols such as AMQP 0.9
and 1.0.

There is a significant operational burden associated with the lifecycle
management of message brokers in an enterprise. Not to mention the time
associated with ensuring the broker is deployed in a cloud native pattern,
assuming failure of underlying infrastructure Cue aims to simplify the
provisioning and management of messaging systems, providing high availability
and auto-healing capabilities for both the cloud operator and end user, while
providing secure tenant-level isolation.

The main goal of this service is to simplify the end user application
development lifecycle for both legacy and "cloud native" applications, allowing
the developer to focus on their application, instead of the underlying
middleware services.


This document describes Cue for users & contributors of the project.

This documentation is generated by the Sphinx toolkit and lives in the
`source tree`_.  Additional documentation on Cue may
also be found on the `OpenStack wiki`_.

.. toctree::
   :glob:
   :maxdepth: 1

   getting-involved
   devguide
   install
   rest


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. _OpenStack Wiki: https://wiki.openstack.org/wiki/Cue
.. _source tree: https://github.com/stackforge/cue
